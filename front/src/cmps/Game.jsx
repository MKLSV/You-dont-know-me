import React, { useEffect, useState } from "react";
import { socket } from "../socket";

export default function Game({ user, players, currentStory, setCurrentStory }) {
  const [choised, setChoised] = useState('');
  const [imReady, setImReady] = useState(false);
  const [roundResult, setRoundResult] = useState(null);
  const [showContinue, setShowContinue] = useState(false);
  const [err, setErr] = useState("");

  const isMyStory = currentStory.ownerId === user.id;
  console.log(currentStory)


  useEffect(() => {
    socket.on("round_result", (data) => {
      setRoundResult(data);
      setImReady(true);
      setShowContinue(true);
    });

    socket.on("new_story", (story) => {
      setRoundResult(null);
      setShowContinue(false);
      setChoised("");
      setImReady(false);
      setCurrentStory(story);
    });

    socket.on("game_over", ({ leaderboard }) => {
      alert(
        `üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${leaderboard[0].name} (${leaderboard[0].score} –æ—á–∫–æ–≤)`
      );
    });

    return () => {
      socket.off("round_result");
      socket.off("new_story");
      socket.off("game_over");
    };
  }, [setCurrentStory]);

  function handleChoise() {
    if (choised) {
      socket.emit("choose_player", {
        roomId: user.room,
        storyId: currentStory.id,
        chosenPlayerId: choised,
      });
      setImReady(true);
      setErr("");
    } else {
      setErr("–Ω—É —Ç—ã –≤—ã–±–µ—Ä–∏ –∫–æ–≥–æ –Ω–∏–±—É–¥—å...");
    }
  }

  function handleContinue() {
    socket.emit("ready_for_next", { roomId: user.room });
    setShowContinue(false);
  }

  if (roundResult && showContinue) {
    // –ù–∞–π–¥—ë–º –æ—Ç–≤–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    const myAnswer = roundResult.answers.find(a => a.chooserId === user.id);
    const myScore = roundResult.scores.find(s => s.id === user.id)?.score || 0;
    const guessed = myAnswer ? myAnswer.correct : false;


    return (
      <div className="waiting">
        <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞</h2>
        <p>
          –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞–ª–∞:{currentStory.ownerId}
          {players.find(p => p.id === roundResult.ownerId)?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
        </p>
        <p>
          {guessed ? "‚úÖ –¢—ã —É–≥–∞–¥–∞–ª!" : "‚ùå –¢—ã –Ω–µ —É–≥–∞–¥–∞–ª"} <br />
          –¢–≤–æ–∏ –æ—á–∫–∏: {myScore}
        </p>

        <h3>–û—á–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:</h3>
        <ul>
          {roundResult.scores.map(s => (
            <li key={s.id}>
              {s.name}: {s.score}
            </li>
          ))}
        </ul>

        <button onClick={() => socket.emit("ready_for_next", { roomId: user.room })}>
          –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º
        </button>
      </div>
    );
  }

  if (imReady) {
    return <div className="waiting"><span>–ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...</span></div>;
  }

  return (
    <div className="game">
      <span className="history">{currentStory?.text}</span>
      <div className="choise">
        <div className="players">
          {players.map(pl => (
            <span
              key={pl.id}
              className={pl.id === choised ? "pl choised" : "pl"}
              onClick={() => setChoised(pl.id)}
            >
              {pl.name}
            </span>
          ))}
        </div>
      </div>
      <p>{err}</p>
      <button onClick={handleChoise}>–í—ã–±—Ä–∞—Ç—å</button>
    </div>
  );
}
